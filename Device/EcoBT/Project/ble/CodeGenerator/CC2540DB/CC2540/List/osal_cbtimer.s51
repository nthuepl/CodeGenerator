///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.1.40829 for 8051            18/Jun/2014  16:46:31 /
// Copyright 2004-2012 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Component /
//                          s\osal\common\osal_cbtimer.c                      /
//    Command line       =  -f D:\NTHU\研究\Important\ThesisCode\Code\GitLabC /
//                          loud\NewEcoExec\codegenerator\Device\EcoBT\Projec /
//                          t\ble\CodeGenerator\CC2540DB\..\..\config\buildCo /
//                          mponents.cfg (-DBROADCASTER_CFG=0x01              /
//                          -DOBSERVER_CFG=0x02 -DPERIPHERAL_CFG=0x04         /
//                          -DCENTRAL_CFG=0x08 -DADV_NCONN_CFG=0x01           /
//                          -DADV_CONN_CFG=0x02 -DSCAN_CFG=0x04               /
//                          -DINIT_CFG=0x08 -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_ /
//                          CFG -DLINK_CFG=ADV_CONN_CFG+INIT_CFG              /
//                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CO /
//                          NN_CFG) -f D:\NTHU\研究\Important\ThesisCode\Code /
//                          \GitLabCloud\NewEcoExec\codegenerator\Device\EcoB /
//                          T\Project\ble\CodeGenerator\CC2540DB\buildConfig. /
//                          cfg (-DHOST_CONFIG=PERIPHERAL_CFG                 /
//                          -DGAP_PRIVACY_RECONNECT)                          /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Component /
//                          s\osal\common\osal_cbtimer.c -D INT_HEAP_LEN=900  /
//                          -D HALNODEBUG -D OSAL_CBTIMER_NUM_TASKS=1 -D      /
//                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D               /
//                          xPOWER_SAVING -D xPLUS_BROADCASTER -D             /
//                          HAL_LCD=FALSE -D HAL_LED=TRUE -D HAL_ADC=TRUE     /
//                          -lB D:\NTHU\研究\Important\ThesisCode\Code\GitLab /
//                          Cloud\NewEcoExec\codegenerator\Device\EcoBT\Proje /
//                          ct\ble\CodeGenerator\CC2540DB\CC2540\List\ -o     /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\CC2540\Obj\ -e --debug  /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\common\ -I        /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\include\ -I       /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\..\..\Components\ /
//                          hal\include\ -I D:\NTHU\研究\Important\ThesisCode /
//                          \Code\GitLabCloud\NewEcoExec\codegenerator\Device /
//                          \EcoBT\Project\ble\CodeGenerator\CC2540DB\..\..\. /
//                          .\..\Components\hal\target\CC2540EB\ -I           /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\..\..\Components\ /
//                          osal\include\ -I D:\NTHU\研究\Important\ThesisCod /
//                          e\Code\GitLabCloud\NewEcoExec\codegenerator\Devic /
//                          e\EcoBT\Project\ble\CodeGenerator\CC2540DB\..\..\ /
//                          ..\..\Components\services\saddr\ -I               /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\..\..\Components\ /
//                          ble\include\ -I D:\NTHU\研究\Important\ThesisCode /
//                          \Code\GitLabCloud\NewEcoExec\codegenerator\Device /
//                          \EcoBT\Project\ble\CodeGenerator\CC2540DB\..\..\. /
//                          .\..\Components\ble\controller\phy\ -I            /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\..\..\Components\ /
//                          ble\controller\include\ -I                        /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\..\..\Components\ /
//                          ble\hci\ -I D:\NTHU\研究\Important\ThesisCode\Cod /
//                          e\GitLabCloud\NewEcoExec\codegenerator\Device\Eco /
//                          BT\Project\ble\CodeGenerator\CC2540DB\..\..\..\.. /
//                          \Components\ble\host\ -I                          /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\common\cc2540\    /
//                          -I D:\NTHU\研究\Important\ThesisCode\Code\GitLabC /
//                          loud\NewEcoExec\codegenerator\Device\EcoBT\Projec /
//                          t\ble\CodeGenerator\CC2540DB\..\..\common\npi\npi /
//                          _np\ -I D:\NTHU\研究\Important\ThesisCode\Code\Gi /
//                          tLabCloud\NewEcoExec\codegenerator\Device\EcoBT\P /
//                          roject\ble\CodeGenerator\CC2540DB\..\..\Profiles\ /
//                          Roles\ -I D:\NTHU\研究\Important\ThesisCode\Code\ /
//                          GitLabCloud\NewEcoExec\codegenerator\Device\EcoBT /
//                          \Project\ble\CodeGenerator\CC2540DB\..\..\Profile /
//                          s\SimpleProfile\ -I D:\NTHU\研究\Important\Thesis /
//                          Code\Code\GitLabCloud\NewEcoExec\codegenerator\De /
//                          vice\EcoBT\Project\ble\CodeGenerator\CC2540DB\..\ /
//                          ..\Profiles\DevInfo\ -I                           /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\Profiles\Accelero /
//                          meter\ -I D:\NTHU\研究\Important\ThesisCode\Code\ /
//                          GitLabCloud\NewEcoExec\codegenerator\Device\EcoBT /
//                          \Project\ble\CodeGenerator\CC2540DB\..\..\Profile /
//                          s\EcoExecGATTProfile\ -I                          /
//                          D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\..\..\Profiles\Batt\    /
//                          -I D:\NTHU\研究\Important\ThesisCode\Code\GitLabC /
//                          loud\NewEcoExec\codegenerator\Device\EcoBT\Projec /
//                          t\ble\CodeGenerator\CC2540DB\..\..\Profiles\HIDDe /
//                          v\ -Ohz                                           /
//    List file          =  D:\NTHU\研究\Important\ThesisCode\Code\GitLabClou /
//                          d\NewEcoExec\codegenerator\Device\EcoBT\Project\b /
//                          le\CodeGenerator\CC2540DB\CC2540\List\osal_cbtime /
//                          r.s51                                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME osal_cbtimer

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?S_SHL
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??osal_CbTimerInit?relay
        PUBLIC ??osal_CbTimerProcessEvent?relay
        PUBLIC ??osal_CbTimerStart?relay
        PUBLIC ??osal_CbTimerStop?relay
        PUBLIC ??osal_CbTimerUpdate?relay
        PUBLIC baseTaskID
        PUBLIC cbTimers
        PUBLIC osal_CbTimerInit
        PUBLIC osal_CbTimerProcessEvent
        PUBLIC osal_CbTimerStart
        PUBLIC osal_CbTimerStop
        PUBLIC osal_CbTimerUpdate

osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
??osal_get_timeoutEx?relay SYMBOL "?relay", osal_get_timeoutEx
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
osal_CbTimerInit    SYMBOL "osal_CbTimerInit"
??osal_CbTimerInit?relay SYMBOL "?relay", osal_CbTimerInit
osal_CbTimerProcessEvent SYMBOL "osal_CbTimerProcessEvent"
??osal_CbTimerProcessEvent?relay SYMBOL "?relay", osal_CbTimerProcessEvent
osal_CbTimerStart   SYMBOL "osal_CbTimerStart"
??osal_CbTimerStart?relay SYMBOL "?relay", osal_CbTimerStart
osal_CbTimerStop    SYMBOL "osal_CbTimerStop"
??osal_CbTimerStop?relay SYMBOL "?relay", osal_CbTimerStop
osal_CbTimerUpdate  SYMBOL "osal_CbTimerUpdate"
??osal_CbTimerUpdate?relay SYMBOL "?relay", osal_CbTimerUpdate

        EXTERN ??osal_get_timeoutEx?relay
        EXTERN ??osal_memset?relay
        EXTERN ??osal_start_timerEx?relay
        EXTERN ??osal_stop_timerEx?relay
        EXTERN osal_get_timeoutEx
        EXTERN osal_memset
        EXTERN osal_start_timerEx
        EXTERN osal_stop_timerEx

// D:\NTHU\研究\Important\ThesisCode\Code\GitLabCloud\NewEcoExec\codegenerator\Device\EcoBT\Components\osal\common\osal_cbtimer.c
//    1 /*************************************************************************************************
//    2   Filename:       osal_cbtimer.c
//    3   Revised:        $Date: 2009-01-14 14:51:34 -0800 (Wed, 14 Jan 2009) $
//    4   Revision:       $Revision: 18762 $
//    5 
//    6   Description:    This file contains the Callback Timer task(s). This module
//    7                   provides 'callback' timers using the existing 'event' timers.
//    8                   In other words, the registered callback function is called 
//    9                   instead of an OSAL event being sent to the owner of the timer
//   10                   when it expires.
//   11 
//   12 
//   13   Copyright 2008-2009 Texas Instruments Incorporated. All rights reserved.
//   14 
//   15   IMPORTANT: Your use of this Software is limited to those specific rights
//   16   granted under the terms of a software license agreement between the user
//   17   who downloaded the software, his/her employer (which must be your employer)
//   18   and Texas Instruments Incorporated (the "License").  You may not use this
//   19   Software unless you agree to abide by the terms of the License. The License
//   20   limits your use, and you acknowledge, that the Software may not be modified,
//   21   copied or distributed unless embedded on a Texas Instruments microcontroller
//   22   or used solely and exclusively in conjunction with a Texas Instruments radio
//   23   frequency transceiver, which is integrated into your product.  Other than for
//   24   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   25   works of, modify, distribute, perform, display or sell this Software and/or
//   26   its documentation for any purpose.
//   27 
//   28   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   29   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   30   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   31   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   32   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   33   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   34   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   35   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   36   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   37   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   38   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   39 
//   40   Should you have any questions regarding your right to use this Software,
//   41   contact Texas Instruments Incorporated at www.TI.com. 
//   42 **************************************************************************************************/
//   43 
//   44 #include "OSAL.h"
//   45 #include "OSAL_Tasks.h"
//   46 
//   47 #include "osal_cbtimer.h"
//   48 
//   49 /*********************************************************************
//   50  * MACROS
//   51  */
//   52 // Macros to convert one-dimensional index 'timer id' to two-dimensional indices
//   53 // 'task id' and 'event id'.
//   54 
//   55 // Find out event id using timer id
//   56 #define EVENT_ID( timerId )            ( 0x0001 << ( ( timerId ) % NUM_CBTIMERS_PER_TASK ) )
//   57 
//   58 // Find out task id using timer id
//   59 #define TASK_ID( timerId )             ( ( ( timerId ) / NUM_CBTIMERS_PER_TASK ) + baseTaskID )
//   60 
//   61 // Find out bank task id using task id
//   62 #define BANK_TASK_ID( taskId )         ( ( baseTaskID - ( taskId ) ) * NUM_CBTIMERS )
//   63 
//   64 /*********************************************************************
//   65  * CONSTANTS
//   66  */
//   67 // Number of callback timers supported per task (limited by the number of OSAL event timers)
//   68 #define NUM_CBTIMERS_PER_TASK          15
//   69 
//   70 // Total number of callback timers
//   71 #define NUM_CBTIMERS                   ( OSAL_CBTIMER_NUM_TASKS * NUM_CBTIMERS_PER_TASK )
//   72 
//   73 /*********************************************************************
//   74  * TYPEDEFS
//   75  */
//   76 // Callback Timer structure
//   77 typedef struct
//   78 {
//   79   pfnCbTimer_t pfnCbTimer; // callback function to be called when timer expires
//   80   uint8 *pData;            // data to be passed in to callback function
//   81 } cbTimer_t;
//   82 
//   83 /*********************************************************************
//   84  * GLOBAL VARIABLES
//   85  */
//   86 // Callback Timer base task id

        RSEG XDATA_I:XDATA:NOROOT(0)
//   87 uint16 baseTaskID = TASK_NO_TASK;
baseTaskID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for baseTaskID>`
        REQUIRE __INIT_XDATA_I
//   88 
//   89 /*********************************************************************
//   90  * EXTERNAL VARIABLES
//   91  */
//   92 
//   93 /*********************************************************************
//   94  * EXTERNAL FUNCTIONS
//   95  */
//   96 
//   97 /*********************************************************************
//   98  * LOCAL VARIABLES
//   99  */
//  100 // Callback Timers table.
//  101 #if ( NUM_CBTIMERS > 0 )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102   cbTimer_t cbTimers[NUM_CBTIMERS];
cbTimers:
        DS 60
        REQUIRE __INIT_XDATA_Z
//  103 #endif
//  104 
//  105 /*********************************************************************
//  106  * LOCAL FUNCTIONS
//  107  */
//  108 
//  109 /*********************************************************************
//  110  * API FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * @fn          osal_CbTimerInit
//  115  *
//  116  * @brief       Callback Timer task initialization function. This function
//  117  *              can be called more than once (OSAL_CBTIMER_NUM_TASKS times).
//  118  *
//  119  * @param       taskId - Message Timer task ID.
//  120  *
//  121  * @return      void
//  122  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  123 void osal_CbTimerInit( uint8 taskId )
osal_CbTimerInit:
        CODE
//  124 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  125   if ( baseTaskID == TASK_NO_TASK )
        MOV     DPTR,#baseTaskID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??osal_CbTimerInit_0
        INC     DPTR
        MOVX    A,@DPTR
??osal_CbTimerInit_0:
        JNZ     ??osal_CbTimerInit_1
//  126   {
//  127     // Only initialize the base task id
//  128     baseTaskID = taskId;
        MOV     A,R6
        MOV     DPTR,#baseTaskID
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  129 
//  130     // Initialize all timer structures
//  131     osal_memset( cbTimers, 0, sizeof( cbTimers ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x3c
        MOV     R5,A
        MOV     R1,A
        MOV     R2,#cbTimers & 0xff
        MOV     R3,#(cbTimers >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  132   }
//  133 }
??osal_CbTimerInit_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  134 
//  135 /*********************************************************************
//  136  * @fn          osal_CbTimerProcessEvent
//  137  *
//  138  * @brief       Callback Timer task event processing function.
//  139  *
//  140  * @param       taskId - task ID.
//  141  * @param       events - events.
//  142  *
//  143  * @return      events not processed
//  144  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 uint16 osal_CbTimerProcessEvent( uint8 taskId, uint16 events )
osal_CbTimerProcessEvent:
        CODE
//  146 {
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  147   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??osal_CbTimerProcessEvent_0
//  148   {
//  149     // Process OSAL messages
//  150 
//  151     // return unprocessed events
//  152     return ( events ^ SYS_EVENT_MSG );
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??osal_CbTimerProcessEvent_1 & 0xFFFF
//  153   }
//  154 
//  155   if ( events )
??osal_CbTimerProcessEvent_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??osal_CbTimerProcessEvent_2 & 0xFFFF
//  156   {
//  157     uint8 i;
//  158     uint16 event;
//  159 
//  160     // Process event timers
//  161     for ( i = 0; i < NUM_CBTIMERS_PER_TASK; i++ )
        MOV     R3,#0x0
//  162     {
//  163       if ( ( events >> i ) & 0x0001 )
??osal_CbTimerProcessEvent_3:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,R3
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??osal_CbTimerProcessEvent_4 & 0xFFFF
//  164       {
//  165         cbTimer_t *pTimer = &cbTimers[BANK_TASK_ID( taskId )+i];
        MOV     DPTR,#baseTaskID
        MOV     ?V0 + 0,R1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0xf
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0xf
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     ?V0 + 0,R3
        MOV     A,R0
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine1 & 0xFFFF
//  166 
//  167         // Found the first event
//  168         event =  0x0001 << i;
??CrossCallReturnLabel_0:
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     A,R3
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  169 
//  170         // Timer expired, call the registered callback function
//  171         pTimer->pfnCbTimer( pTimer->pData );
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        ; Setup parameters for indirect call
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  172 
//  173         // Mark entry as free
//  174         pTimer->pfnCbTimer = NULL;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  175         
//  176         // Null out data pointer
//  177         pTimer->pData = NULL;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  178       
//  179         // We only process one event at a time
//  180         break;
        SJMP    ??osal_CbTimerProcessEvent_5
//  181       }
//  182     }
??osal_CbTimerProcessEvent_4:
        INC     R3
        MOV     A,R3
        CLR     C
        SUBB    A,#0xf
        JNC     $+5
        LJMP    ??osal_CbTimerProcessEvent_3 & 0xFFFF
//  183 
//  184     // return unprocessed events
//  185     return ( events ^ event );
??osal_CbTimerProcessEvent_5:
        MOV     A,R6
        XRL     A,?V0 + 2
        MOV     R2,A
        MOV     A,R7
        XRL     A,?V0 + 3
??osal_CbTimerProcessEvent_1:
        MOV     R3,A
        SJMP    ??osal_CbTimerProcessEvent_6
//  186   }
//  187 
//  188   // If reach here, the events are unknown
//  189   // Discard or make more handlers
//  190   return 0;
??osal_CbTimerProcessEvent_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??osal_CbTimerProcessEvent_6:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
//  191 }
//  192 
//  193 /*********************************************************************
//  194  * @fn      osal_CbTimerStart
//  195  *
//  196  * @brief   This function is called to start a callback timer to expire 
//  197  *          in n mSecs. When the timer expires, the registered callback
//  198  *          function will be called.
//  199  *
//  200  * @param   pfnCbTimer - callback function to be called when timer expires
//  201  * @param   pData - data to be passed in to callback function
//  202  * @param   timeout - in milliseconds.
//  203  * @param   pTimerId - will point to new timer Id (if not null)
//  204  *
//  205  * @return  Success, or Failure.
//  206  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  207 Status_t osal_CbTimerStart( pfnCbTimer_t pfnCbTimer, uint8 *pData,  
osal_CbTimerStart:
        CODE
//  208                            uint16 timeout, uint8 *pTimerId )
//  209 {
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        ; Saved register size: 19
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 8,R4
        MOV     ?V0 + 9,R5
//  210   uint8 i;
//  211  
//  212   // Validate input parameters
//  213   if ( pfnCbTimer == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_CbTimerStart_0
//  214   {
//  215     return ( INVALIDPARAMETER );
        MOV     R1,#0x2
        LJMP    ??osal_CbTimerStart_1 & 0xFFFF
//  216   }
//  217 
//  218   // Look for an unused timer first
//  219   for ( i = 0; i < NUM_CBTIMERS; i++ )
??osal_CbTimerStart_0:
        MOV     ?V0 + 10,#0x0
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  220   {
//  221     if ( cbTimers[i].pfnCbTimer == NULL )
??osal_CbTimerStart_2:
        MOV     ?V0 + 0,?V0 + 10
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     DPL,?V0 + 0
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ     ??osal_CbTimerStart_3
//  222     {
//  223       // Start the OSAL event timer first
//  224       if ( osal_start_timerEx( TASK_ID( i ), EVENT_ID( i ), timeout ) == SUCCESS )
        ; Setup parameters for call to function osal_start_timerEx
        MOV     ?V0 + 4,?V0 + 2
        MOV     ?V0 + 5,?V0 + 3
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     A,?V0 + 10
        MOV     B,#0xf
        DIV     AB
        MOV     A,B
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     DPTR,#baseTaskID
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     B,#0xf
        MOV     A,?V0 + 10
        DIV     AB
        ADD     A,R0
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        MOV     A,R1
        JNZ     ??osal_CbTimerStart_3
//  225       {
//  226         // Set up the callback timer
//  227         cbTimers[i].pfnCbTimer = pfnCbTimer;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  228         cbTimers[i].pData = pData;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 9
        MOVX    @DPTR,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
//  229 
//  230         if ( pTimerId != NULL )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??osal_CbTimerStart_4
//  231         {
//  232           // Caller is intreseted in the timer id
//  233           *pTimerId = i;
        MOV     A,?V0 + 10
        MOVX    @DPTR,A
//  234         }
//  235 
//  236         return ( SUCCESS );
??osal_CbTimerStart_4:
        MOV     R1,#0x0
        SJMP    ??osal_CbTimerStart_1
//  237       }
//  238     }
//  239   }
??osal_CbTimerStart_3:
        INC     ?V0 + 10
        MOV     A,?V0 + 10
        CLR     C
        SUBB    A,#0xf
        JNC     $+5
        LJMP    ??osal_CbTimerStart_2 & 0xFFFF
//  240 
//  241   // No timer available
//  242   return ( NO_TIMER_AVAIL );
        MOV     R1,#0x8
??osal_CbTimerStart_1:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
//  243 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        MOV     A,#cbTimers & 0xff
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     A,#(cbTimers >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     ?V0 + 1,A
        RET

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        MOV     DPH,A
        REQUIRE ??Subroutine2_0
        ; // Fall through to label ??Subroutine2_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine2_0:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
//  244 
//  245 /*********************************************************************
//  246  * @fn      osal_CbTimerUpdate
//  247  *
//  248  * @brief   This function is called to update a message timer that has
//  249  *          already been started. If SUCCESS, the function will update
//  250  *          the timer's timeout value. If INVALIDPARAMETER, the timer 
//  251  *          either doesn't exit.
//  252  *
//  253  * @param   timerId - identifier of the timer that is to be updated
//  254  * @param   timeout - new timeout in milliseconds.
//  255  *
//  256  * @return  SUCCESS or INVALIDPARAMETER if timer not found
//  257  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  258 Status_t osal_CbTimerUpdate( uint8 timerId, uint16 timeout )
osal_CbTimerUpdate:
        CODE
//  259 {
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  260   // Look for the existing timer
//  261   if ( timerId < NUM_CBTIMERS )
        MOV     A,R1
        CLR     C
        SUBB    A,#0xf
        JNC     ??osal_CbTimerUpdate_0
//  262   {
//  263     if ( cbTimers[timerId].pfnCbTimer != NULL )
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,#cbTimers & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(cbTimers >> 8) & 0xff
        ADDC    A,?V0 + 3
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??osal_CbTimerUpdate_0
//  264     {
//  265       // Make sure the corresponding OSAL event timer is still running
//  266       if ( osal_get_timeoutEx( TASK_ID( timerId ), EVENT_ID( timerId ) ) != 0 )
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 4
        MOV     B,#0xf
        DIV     AB
        MOV     A,B
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     B,#0xf
        MOV     A,?V0 + 4
        DIV     AB
        MOV     ?V0 + 5,A
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#baseTaskID
        MOVX    A,@DPTR
        ADD     A,?V0 + 5
        MOV     R1,A
        LCALL   ??osal_get_timeoutEx?relay
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JZ      ??osal_CbTimerUpdate_0
//  267       {
//  268         // Timer exists; update it
//  269         osal_start_timerEx( TASK_ID( timerId ), EVENT_ID( timerId ), timeout );
        ; Setup parameters for call to function osal_start_timerEx
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#baseTaskID
        MOVX    A,@DPTR
        ADD     A,?V0 + 5
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
//  270 
//  271         return (  SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_CbTimerUpdate_1
//  272       }
//  273     }
//  274   }
//  275 
//  276   // Timer not found
//  277   return ( INVALIDPARAMETER );
??osal_CbTimerUpdate_0:
        MOV     R1,#0x2
??osal_CbTimerUpdate_1:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  278 }
//  279 
//  280 
//  281 /*********************************************************************
//  282  * @fn      osal_CbTimerStop
//  283  *
//  284  * @brief   This function is called to stop a timer that has already been
//  285  *          started. If SUCCESS, the function will cancel the timer. If 
//  286  *          INVALIDPARAMETER, the timer doesn't exit.
//  287  *
//  288  * @param   timerId - identifier of the timer that is to be stopped
//  289  *
//  290  * @return  SUCCESS or INVALIDPARAMETER if timer not found
//  291  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  292 Status_t osal_CbTimerStop( uint8 timerId )
osal_CbTimerStop:
        CODE
//  293 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0 + 2,R1
//  294   // Look for the existing timer
//  295   if ( timerId < NUM_CBTIMERS )
        MOV     A,R1
        CLR     C
        SUBB    A,#0xf
        JNC     ??osal_CbTimerStop_0
//  296   {
//  297     if ( cbTimers[timerId].pfnCbTimer != NULL )
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#cbTimers & 0xff
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,#(cbTimers >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine2_0 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??osal_CbTimerStop_0
//  298     {
//  299       // Timer exists; stop the OSAL event timer first
//  300       osal_stop_timerEx( TASK_ID( timerId ), EVENT_ID( timerId ) );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,?V0 + 2
        MOV     B,#0xf
        DIV     AB
        MOV     A,B
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPTR,#baseTaskID
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     B,#0xf
        MOV     A,?V0 + 2
        DIV     AB
        ADD     A,R0
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  301 
//  302       // Mark entry as free
//  303       cbTimers[timerId].pfnCbTimer = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  304 
//  305       // Null out data pointer
//  306       cbTimers[timerId].pData = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  307 
//  308       return ( SUCCESS );
        MOV     R1,A
        SJMP    ??osal_CbTimerStop_1
//  309     }
//  310   }
//  311 
//  312   // Timer not found
//  313   return ( INVALIDPARAMETER );
??osal_CbTimerStop_0:
        MOV     R1,#0x2
??osal_CbTimerStop_1:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
//  314 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for baseTaskID>`:
        DATA16
        DW 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_CbTimerInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_CbTimerInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_CbTimerProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_CbTimerProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_CbTimerStart?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_CbTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_CbTimerUpdate?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_CbTimerUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_CbTimerStop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_CbTimerStop

        END
//  315 
//  316 /****************************************************************************
//  317 ****************************************************************************/
// 
// 716 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   2 bytes in segment XDATA_I
//   2 bytes in segment XDATA_ID
//  60 bytes in segment XDATA_Z
// 
// 748 bytes of CODE  memory
//  62 bytes of XDATA memory
//
//Errors: none
//Warnings: none
