#!/usr/bin/env python
#
# file: genmapdef.py
#
# this python script generates the header file that #define each
# symbol (prefixed by the argv[2]) to its relay
# address, so that it can be used for the binding files.
#

import sys

if len(sys.argv) != 4:
	sys.exit("usage: " + sys.argv[0] + """ dic.py prefix outfile.h, where
	dic.py is the dictionary file generated by the code parser,
	prefix is added in front of all macro names (let's use "MAP_"), and
	outfile.h is the name of the output file as C header file.""")

try:
	fh = open(sys.argv[1])
except:
	sys.exit("cannot open dic.py file "+sys.argv[1]+" for reading")

exec(fh.read())

fh.close()

L = sorted([ (key, value['relay']) for (key, value) in _map.items() \
		if value.get('relay', None)])
		
L.append( ['notify', _map.get('notify').get('address')] )
L.append( ['simpleBLEPeripheral_TaskID', _map.get('simpleBLEPeripheral_TaskID').get('address')] )
L.append( ['accelEnabler', _map.get('accelEnabler').get('address')] )
L.append( ['attDeviceName', _map.get('attDeviceName').get('address')] )

if '2541' in sys.argv[1]:
	L.append( ['timeEnabler', _map.get('timeEnabler').get('address')] )

try:
	fh = open(sys.argv[3], 'w')
except:
	sys.exit('cannot write to output file '+sys.argv[3])

for (name, relay) in L:
	fh.write('#define %-50s %s\n' % (sys.argv[2]+"_"+name, hex(relay)))

fh.close()
